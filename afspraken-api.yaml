openapi: 3.0.3
info:
  version: '0.0.1'
  title: Afspraken API
  description: > 
    This afspraken API is generated based on the specifications of the [Digipolis API System 7.0](https://antwerp-api.digipolis.be/). Here are some tips what you can do next: 
    
    Here are some tips **what you can do next:** 

      - Check if all resources (like service) require all operations that were generated, some parts of the API may be readOnly so remove the operations not needed
      - The schema of all resources (or models) are examples here, be sure to adjust them to your case at hand
      - Have a look [here](https://antwerp-api.digipolis.be/#/content/common/swagger-docs) for tips on writing good documentation.'
        
servers:
  - url: 'https://{environment}.digipolis.be/afspraken:{port}/{version}'
    description: OTAP servers
    variables:
      environment:
        default: api-gw   #production
        description: choice between production, acceptance or the development environment
        enum:
        - 'api-gw'        #production
        - 'api-gw-a'      #acceptance
        - 'api-gw-o'      #development
      port:
        description: select the port for the secure HTTP connection
        enum:
          - '443'
          - '8443'
        default: '443'   
      version:
        default: v1
        description: specify the major version of this api
paths:
  
  '/services/{serviceId}':
    get:
      summary: Retrieve one service
      description: Retrieve exactly one `service` for the given id in the path
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - Service
  
  '/services/{serviceId}/availableDays/{availableDayId}':
    get:
      summary: Retrieve one availableDay
      description: Retrieve exactly one `availableDay` for the given id in the path
      parameters:
        - $ref: '#/components/parameters/availableDayId'
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/availableDay'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - Service
  '/tenants':
    get:
      summary: Retrieve a list of tenants
      description: Retrieve a paged result list of tenants
      parameters:
        - in: query
          name: refnumber
          description: Filter tenants using a given refnumber
          schema:
            type: integer
            example: 219
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Pagesize'
        - $ref: '#/components/parameters/PagingStrategy'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenants'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - System
    post:
      summary: Add a new tenant to the tenants collection.
      description: Add a new `tenant` resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tenant'
      responses:
        '201':
          description: tenant created
          content:
            application/json:
              schema:
                type: string
                description: The id of the newly created tenant 
                example: 4514  
          headers:
            Location:
              description: The location of the newly created tenant
              schema: 
                type: string
                format: uri
                example: '/tenants/9696'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - System
  '/tenants/{tenantId}':
    get:
      summary: Retrieve one tenant
      description: Retrieve exactly one `tenant` for the given id in the path
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenant'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - System
    head:
      summary: Check if the tenant exist
      description: Check if the `tenant` with the given id exists
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '200':
          description: tenant found
        '404':
          description: tenant Not Found
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - System
    delete:
      summary: Delete a tenant
      description: Remove the tenant with the given id
      parameters:
        - $ref: '#/components/parameters/tenantId'
      responses:
        '204':
          description: tenant removed
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - System  
  '/status/health':
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns high level information about the service according to the status
        &amp; [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - System
  '/status/health/components':
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns information about the service and its underlying components
        according to the status &amp; [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatusComponents'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - System
components:
  parameters:
    serviceId:
      name: serviceId
      in: path
      description: >-
        The unique `id` of this `service` in our system.
      required: true
      schema:
        minimum: 1
        type: string
        description: >-
          The service id. This is a unique number issued by this API.
        example: 20037            
    availableDayId:
      name: availableDayId
      in: path
      description: >-
        The unique `id` of this `availableDay` in our system.
      required: true
      schema:
        minimum: 1
        type: string
        description: >-
          The availableDay id. This is a unique number issued by this API.
        example: 20037            
    tenantId:
      name: tenantId
      in: path
      description: >-
        The unique `id` of this `tenant` in our system.
      required: true
      schema:
        minimum: 1
        type: string
        description: >-
          The tenant id. This is a unique number issued by this API.
        example: 20037            
    Page:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/parameters/Page'
    Pagesize:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/parameters/Pagesize'
    PagingStrategy:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/parameters/PagingStrategy'
  responses:
    BadRequest:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/responses/BadRequest'
    Unexpected:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/responses/Unexpected'
    InternalServer:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/responses/InternalServer'
    NotFound:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/responses/NotFound'
  schemas:
    service:
      type: object
      properties:
        id:
          type: string
          description: 'A unique service number'
          readOnly: true
          example: 10034
        date:
          type: string
          format: date
          description: The date when this service was issued.
          example: 28-04-2020
        logo:
          type: string
          format: uri
          description: The logo for this service
          example: s3.amazon.com/klj1002/logo.xyz.png
    availableDay:
      type: object
      properties:
        id:
          type: string
          description: 'A unique availableDay number'
          readOnly: true
          example: 10034
        date:
          type: string
          format: date
          description: The date when this availableDay was issued.
          example: 28-04-2020
        logo:
          type: string
          format: uri
          description: The logo for this availableDay
          example: s3.amazon.com/klj1002/logo.xyz.png
    tenants:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _embedded:
          type: object
          description: Returns a list of tenants
          properties:
            tenants:
              type: array
              items:
                $ref: '#/components/schemas/tenant'
        _page:
          $ref: '#/components/schemas/Pages'
      example:
        _links:
          self:
            href: /tenants?pagesize=10&page=1
          first:
            href: /tenants?pagesize=10&page=1
          last:
            href: /tenants?pagesize=10&page=3
          prev:
            href: /tenants?pagesize=10&page=1
          next:
            href: /tenants?pagesize=10&page=2
        _embedded:
          tenants:
            - nummer: 10034
              datum: 28-04-2020
              logo: s3.amazon.com/klj1002/logo.xyz.png
            - nummer: 10222
              datum: 12-07-2020
              logo: s3.amazon.com/hj67JK/logo.abc.png
            - ...
        _page:
          size: 10
          totalElements: 24
          totalPages: 1
          number: 0
    tenant:
      type: object
      properties:
        id:
          type: string
          description: 'A unique tenant number'
          readOnly: true
          example: 10034
        date:
          type: string
          format: date
          description: The date when this tenant was issued.
          example: 28-04-2020
        logo:
          type: string
          format: uri
          description: The logo for this tenant
          example: s3.amazon.com/klj1002/logo.xyz.png
    healthStatus:
      type: object
      properties:
        status:
          type: string
          description: Contains a high level status of the health for this service
          example: outage
          enum:
            - ok
            - degraded
            - outage
      description: A high level health status result
    healthStatusComponents:
      allOf:
        - $ref: '#/components/schemas/healthStatus'
        - type: object
          properties:
            components:
              type: array
              items:
                type: object
                properties:
                  errormessage:
                    type: string
                    description: Contains the actual message in case of a problem
                    example: timeout
                  code:
                    type: string
                    description: the code of the problem that occurred
                    example: TIMEOUT504
                  name:
                    type: string
                    description: the name of the underlying component
                    example: eventhandler
                  details:
                    type: string
                    description: more information about the problem at hand
                    example: >-
                      Messages are not received due to the eventhandler who
                      seems to be too busy.
                  type:
                    type: string
                    description: the type of problem that occurred
                    example: event
          description: >-
            A health status result including the details of underlying
            components
    Links:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/schemas/Links'
    Pages:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/schemas/Pages'
    Problem:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/schemas/Problem'
tags:
  - name: Service
    description: Operations related to  services,  availableDays,  ...
  - name: System
    description: Operations related to  health checks,  monitoring,  caching,  tenants,  ...
