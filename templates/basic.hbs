{{!-- {{
  This template is a fairly basic implementation of a REST API. it is innspired by the API guidelines from Antwerp (https://antwerp-api.digipolis.be/#/content/common/swagger-docs)
  Note that the async post operation is not yet supported in this template. 
}} --}}
openapi: 3.0.3
info:
  version: '{{version}}'
  title: {{capitalize name}} API
  description: Your shiny new OAS Document for your {{capitalize name}} API
  contact:
    name: John Doe
    email: john.doe@gmail.com
    url: https://www.johndoe.com
  license:
    name: MIT license
    url: https://opensource.org/licenses/MIT
{{#if resources.length}}
paths:
{{else}}
paths: {}    
{{/if}}
{{#each resources}}
  {{#if collectionPath~}}'{{~collectionPath~}}':{{~/if}}
    {{#if ops.hasList}}
    get:
      summary: List {{collection}}
      description: 'Retrieve a paged result list of {{#if parent }}`{{collection}}` for a certain `{{parent.name}}`{{else}}`{{collection}}`{{/if}}.'
      parameters:
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter.name}}'
        {{/if}}
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/{{collection}}'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.hasPost}}
    post:
      summary: Create {{name}}
      description: 'Create a new `{{name}}` resource to the `{{collection}}` collection{{#if parent }} of the given `{{parent.name}}`{{/if}}.'
      {{#if parent }}
      parameters:
        - $ref: '#/components/parameters/{{parent.idParameter.name}}'
      {{/if}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{name}}'
      responses:
        '201':
          description: '`{{name}}` created'
          content:
            application/json:
              schema:
                type: object
                description: 'The `id` of the newly created `{{name}}`'
                properties:
                  id:
                    type: number
                    description: 'A unique number for `{{name}}`'
                    readOnly: true
                    example: {{random 1000 10000}}
          headers:
            Location:
              description: The location of the newly created {{name}}
              schema: 
                type: string
                format: uri
                example: '/{{#if parent }}{{parent.collection}}/{{random 1000 10000}}/{{/if}}{{collection}}/{{random 1000 10000}}'
        '400':
          $ref: '#/components/responses/badrequest'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
  {{#if resourcePath ~}}'{{~resourcePath~}}':{{~/if}}
    {{#if ops.hasGet}}
    get:
      summary: Retrieve {{name}}
      description: 'Retrieve exactly one `{{name}}` for the given id in the path.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter.name}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter.name}}'
        {{/if}}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{name}}'
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'api.somedomain.com/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 404
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.hasHead}}
    head:
      summary: Check if {{name}} exist
      description: 'Check if the `{{name}}` with the given id exists.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter.name}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter.name}}'
        {{/if}}
      responses:
        '200':
          description: '`{{name}}` exist.'
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'https://api.somedomain.com/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 400
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.hasPut}}
    put:
      summary: Replace {{name}} 
      description: 'Replace the complete `{{name}}` resource with the one provided in the payload. If {{name}} does not exist a 404 will be returned.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter.name}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter.name}}'
        {{/if}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{name}}'
      responses:
        '200':
          description: '`{{name}}` replaced'
          content:
            application/json:
              schema:
                type: object
                description: 'The `id` of the newly created `{{name}}`'
                properties:
                  id:
                    type: number
                    description: 'A unique number for `{{name}}`'
                    readOnly: true
                    example: {{random 1000 10000}}
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'https://api.somedomain.com/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 400
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}} 
    {{/if}}
    {{#if ops.hasPatch}}
    patch:
      summary: Update {{name}}
      description: 'With this operation you can update parts of the `{{name}}` for the given id.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter.name}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter.name}}'
        {{/if}}
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                    description: 'The date when this `{{name}}` was issued.'
                    example: '2020-04-16'
      responses:
        '204':
          description: '`{{name}}` partially updated'
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'https://api.somedomain.com/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 400
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.hasDelete}}
    delete:
      summary: Delete {{name}}
      description: 'Remove the `{{name}}` with the given id.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      responses:
        '204':
          description: '`{{name}}` removed'
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'https://api.somedomain.com/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 400
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}  
    {{/if}}
{{/each}}
components:
  parameters:
    tenantParam:
      name: dgp-tenant-id
      description: the identification of the tenant you want to use
      in: header
      required: true
      schema:
        type: string
{{#each resources}}
    {{idParameter.name}}:
      name: {{idParameter.key}}
      in: path
      description: >-
        The unique `id` of this `{{name}}` in our system.
      required: true
      schema:
        minimum: 1
        type: string
        description: >-
         'The `{{name}}` id. This is a unique number issued by this API.'
        example: {{random 2000 10000}}  
{{/each}}
    pagesize:
      name: pagesize
      in: query
      description: Max number of items for each page
      required: true
      schema:
        type: integer
    page:
      name: page
      in: query
      description: Starting offset for the list, this can be either a number or the
        literal "last"
      required: true
      schema:
        type: string
  responses:
    badrequest:
      description: Bad Request
      content:
        application/problem+json:
            schema:
                $ref: '#/components/schemas/problem'
            example:
              type: 'https://api.somedomain.com/{{name}}/{{version}}/errors/SVC0034'
              title: 'The request is malformed, please check the URL in the queryparameters and header values.'
              status: 400
              identifier: 'DDD68BE6-B522-3E35-08BF-9563D1D11991'
              code: 'SVC0034'
    internalserver:
      description: Internal Server Error
      content:
        application/problem+json:
            schema:
                $ref: '#/components/schemas/problem'
            example:
              type: 'https://api.somedomain.com/{{name}}/{{version}}/errors/SVC0032'
              title: 'There seems to be an issue with the server at the moment. Please try again later.'
              status: 500
              identifier: 'C5C68BE6-B5FF-11E5-B08F-D1D119563991'
              code: 'SVC0032'
    notfound:
      description: Not found
      content:
        application/problem+json:
            schema:
                $ref: '#/components/schemas/problem'
            example:
              type: 'https://api.somedomain.com/{{name}}/{{version}}/errors/SVC0011'
              title: 'Requested resource not found.'
              status: 404
              identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
              code: 'SVC0011'
  schemas:
{{#each resources}}
  {{#if ops.hasCollectionOps}}
    {{collection}}:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/links'
        _embedded:
          type: object
          description: Returns a list of {{collection}}
          properties:
            {{collection}}:
              type: array
              items:
                $ref: '#/components/schemas/{{name}}'
        _page:
          $ref: '#/components/schemas/pages'
      example:
        _links:
          self:
            href: /{{collection}}?pagesize=10&page=1
          first:
            href: /{{collection}}?pagesize=10&page=1
          last:
            href: /{{collection}}?pagesize=10&page=3
          prev:
            href: /{{collection}}?pagesize=10&page=1
          next:
            href: /{{collection}}?pagesize=10&page=2
        _embedded:
          {{collection}}:
            - id: {{random 1000 10000}}
              date: '2020-04-28'
              logo: 'https://s3.amazon.com/klj{{random 1000 10000}}/logo.xyz.png'
            - id: {{random 1000 10000}}
              date: '2020-07-12'
              logo: 'https://s3.amazon.com/pfh{{random 1000 10000}}/logo.xyz.png'
            - ...
        _page:
          size: 10
          totalElements: 24
          totalPages: 1
          number: 0
  {{/if}}
    {{name}}:
      type: object
      properties:
        id:
          type: number
          description: 'A unique number for `{{name}}`'
          readOnly: true
          example: {{random 1000 10000}}
        date:
          type: string
          format: date
          description: 'The date when this `{{name}}` was issued.'
          example: '2020-04-16'
        logo:
          type: string
          format: uri
          description: 'The logo for this `{{name}}`'
          example: 'https://s3.amazon.com/klj{{random 1000 10000}}/logo.xyz.png'
{{/each}}
    links:
      type: object
      description: provides navigational uri's to other pages of the collection
      properties:
        self:
          type: object
          properties:
            href:
              type: string
              format: uri
              example: https://api.somedomain.com/{{name}}/{{version}}/resource?pagesize=5&page=2
          description: contains a link to this page of this collection
        first:
          type: object
          properties:
            href:
              type: string
              format: uri
              example: https://api.somedomain.com/{{name}}/{{version}}/resource?pagesize=5&page=1
          description: contains a link to the first page of this collection
        last:
          type: object
          properties:
            href:
              type: string
              format: uri
              example: https://api.somedomain.com/{{name}}/{{version}}/resource?pagesize=5&page=last
          description: contains a link to the last page of this collection
        prev:
          type: object
          properties:
            href:
              type: string
              format: uri
              example: https://api.somedomain.com/{{name}}/{{version}}/resource?pagesize=5&page=1
          description: contains a link to the previous page of this collection
        next:
          type: object
          properties:
            href:
              type: string
              format: uri
              example: https://api.somedomain.com/{{name}}/{{version}}/resource?pagesize=5&page=3
          description: contains a link to the next page of this collection
    pages:
      type: object
      required:
      - number
      - size
      properties:
        size:
          type: integer
          description: returns the size of a page provided in the pagesize query parameter of the request
          example: 10
        totalElements:
          type: integer
          description: the total number of items in the resulting collection
          example: 34
        totalPages:
          type: integer
          description: the total number of pages in the resulting array. This is calculated with the given size value
          example: 4
        number:
          type: integer
          description: return the page number provided in the page query parameter of the request
          example: 1
      description: A generic model used to describe paging information when requesting a list of resources.
    problem:
      type: object
      properties:
        type:
          type: string
          description: A URI identifying this problem. The URI should resolve into human-readable documentation for this problem.
          format: uri
          example: https://api.somedomain.com/{{name}}/{{version}}/resource/FE0032
        title:
          type: string
          description: A short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized)
          example: You do not have enough credit.
        status:
          maximum: 6E+2
          exclusiveMaximum: true
          minimum: 4E+2
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          format: int32
          example: 400
        identifier:
          type: string
          description: a unique identifier of the given problem, usefull to recover this problem message into a logging system.
          example: C5C68BE6-B5FF-11E5-B08F-D1D119563991
        code:
          type: string
          description: the code of the given problem
          example: FE0032
      description: A generic model used to describe problems as a result of incorrect or failed HTTP requests.
tags:
{{#each tags}}
  - name: {{capitalize name}}
    {{#ifGT usedInCollection.length 1}} 
    description: Operations related to {{#each usedInCollection}}{{capitalize .}}, {{/each}}... 
    {{else}} 
    description: Operations related to {{#each usedInCollection}}{{capitalize .}} {{/each}}
    {{/ifGT}}
{{/each}}