openapi: 3.0.3
info:
  version: '0.0.1'
  title: {{capitalize name}} API
  description: > 
    This {{name}} API is generated based on the specifications of the [Digipolis API System 7.0](https://antwerp-api.digipolis.be/). Here are some tips what you can do next: 
    
    Here are some tips **you can do next:** 

      - Check if all resources (like {{resources.0.name}}) require all operations that were generated, some parts of the API may be readOnly so remove the operations not needed
      - The schema of all resources (or models) are examples here, be sure to adjust them to your case at hand
      - Have a look [here](https://antwerp-api.digipolis.be/#/content/common/swagger-docs) for tips on writing good documentation.'
        
servers:
  - url: 'https://{environment}.digipolis.be/{{urlFriendlyName}}:{port}/{version}'
    description: OTAP servers
    variables:
      environment:
        default: api-gw   #production
        description: choice between production, acceptance or the development environment
        enum:
        - 'api-gw'        #production
        - 'api-gw-a'      #acceptance
        - 'api-gw-o'      #development
      port:
        description: select the port for the secure HTTP connection
        enum:
          - '443'
          - '8443'
        default: '443'   
      version:
        default: v1
        description: specify the major version of this api
{{#if resources.length}}
paths:
{{else}}
paths: {}    
{{/if}}
{{#each resources}}
  {{#if collectionPath~}}'{{~collectionPath~}}':{{~/if}}
    {{#if ops.list}}
    get:
      summary: Retrieve a list of {{#if parent }}{{collection}} for a certain {{parent.name}}{{else}}{{collection}}{{/if}}
      description: Retrieve a paged result list of {{#if parent }}{{collection}} for a certain {{parent.name}}{{else}}{{collection}}{{/if}}
      parameters:
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
        - in: query
          name: refnumber
          description: Filter {{collection}} using a given refnumber
          schema:
            type: integer
            example: {{random 1 500}}
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Pagesize'
        - $ref: '#/components/parameters/PagingStrategy'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{collection}}'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.post}}
    post:
      summary: Add a new {{name}} to the {{collection}} collection.
      description: Add a new `{{name}}` resource.
      {{#if parent }}
      parameters:
        - $ref: '#/components/parameters/{{parent.idParameter}}'
      {{/if}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{name}}'
      responses:
        '201':
          description: {{name}} created
          content:
            application/json:
              schema:
                type: string
                description: The id of the newly created {{name}} 
                example: {{random 1000 10000}}  
          headers:
            Location:
              description: The location of the newly created {{name}}
              schema: 
                type: string
                format: uri
                example: '/{{#if parent }}{{parent.collection}}/{{random 1000 10000}}/{{/if}}{{collection}}/{{random 1000 10000}}'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - {{capitalize tag}}
    {{/if}}
  {{#if resourcePath ~}}'{{~resourcePath~}}':{{~/if}}
    {{#if ops.get}}
    get:
      summary: Retrieve one {{name}}
      description: Retrieve exactly one `{{name}}` for the given id in the path
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{name}}'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.head}}
    head:
      summary: Check if the {{name}} exist
      description: Check if the `{{name}}` with the given id exists
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      responses:
        '200':
          description: {{name}} found
        '404':
          description: {{name}} Not Found
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.put}}
    put:
      summary: Replace the {{name}} with the one given here
      description: If the {{name}} does not exist, one will be created
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{name}}'
      responses:
        '204':
          description: {{name}} replaced
        '201':
          description: {{name}} created
          content:
            application/json:
              schema:
                type: string
                description: The {{name}} number
                example: {{random 1000 10000}}  
          headers:
            Location:
              description: The location of the newly created {{name}}
              schema: 
                type: string
                format: uri
                example: '/{{#if parent }}{{parent.collection}}/{{random 1000 10000}}/{{/if}}{{collection}}/{{random 1000 10000}}'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - {{capitalize tag}} 
    {{/if}}
    {{#if ops.patch}}
    patch:
      summary: Update a {{name}}
      description: With this operation you can update parts of the {{name}} with the given id
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      requestBody:
        required: true
        content:
          application/json:
            example:
              someprop: newvalue
      responses:
        '204':
          description: {{name}} partially updated
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.delete}}
    delete:
      summary: Delete a {{name}}
      description: Remove the {{name}} with the given id
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      responses:
        '204':
          description: {{name}} removed
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - {{capitalize tag}}  
    {{/if}}
{{/each}}
{{#if resources.length}}
  '/status/health':
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns high level information about the service according to the status
        &amp; [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - System
  '/status/health/components':
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns information about the service and its underlying components
        according to the status &amp; [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatusComponents'
        '500':
          $ref: '#/components/responses/InternalServer'
        'default':
          $ref: '#/components/responses/Unexpected'
      tags:
        - System
{{/if}}
components:
  parameters:
{{#each resources}}
    {{idParameter}}:
      name: {{idParameter}}
      in: path
      description: >-
        The unique `id` of this `{{name}}` in our system.
      required: true
      schema:
        minimum: 1
        type: string
        description: >-
          The {{name}} id. This is a unique number issued by this API.
        example: 20037            
{{/each}}
    Page:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/parameters/Page'
    Pagesize:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/parameters/Pagesize'
    PagingStrategy:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/parameters/PagingStrategy'
  responses:
    BadRequest:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/responses/BadRequest'
    Unexpected:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/responses/Unexpected'
    InternalServer:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/responses/InternalServer'
    NotFound:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/responses/NotFound'
  schemas:
{{#each resources}}
  {{#if ops.hasCollectionOps}}
    {{collection}}:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
        _embedded:
          type: object
          description: Returns a list of {{collection}}
          properties:
            {{collection}}:
              type: array
              items:
                $ref: '#/components/schemas/{{name}}'
        _page:
          $ref: '#/components/schemas/Pages'
      example:
        _links:
          self:
            href: /{{collection}}?pagesize=10&page=1
          first:
            href: /{{collection}}?pagesize=10&page=1
          last:
            href: /{{collection}}?pagesize=10&page=3
          prev:
            href: /{{collection}}?pagesize=10&page=1
          next:
            href: /{{collection}}?pagesize=10&page=2
        _embedded:
          {{collection}}:
            - nummer: 10034
              datum: 28-04-2020
              logo: s3.amazon.com/klj1002/logo.xyz.png
            - nummer: 10222
              datum: 12-07-2020
              logo: s3.amazon.com/hj67JK/logo.abc.png
            - ...
        _page:
          size: 10
          totalElements: 24
          totalPages: 1
          number: 0
  {{/if}}
    {{name}}:
      type: object
      properties:
        id:
          type: string
          description: 'A unique {{name}} number'
          readOnly: true
          example: 10034
        date:
          type: string
          format: date
          description: The date when this {{name}} was issued.
          example: 28-04-2020
        logo:
          type: string
          format: uri
          description: The logo for this {{name}}
          example: s3.amazon.com/klj1002/logo.xyz.png
{{/each}}
    healthStatus:
      type: object
      properties:
        status:
          type: string
          description: Contains a high level status of the health for this service
          example: outage
          enum:
            - ok
            - degraded
            - outage
      description: A high level health status result
    healthStatusComponents:
      allOf:
        - $ref: '#/components/schemas/healthStatus'
        - type: object
          properties:
            components:
              type: array
              items:
                type: object
                properties:
                  errormessage:
                    type: string
                    description: Contains the actual message in case of a problem
                    example: timeout
                  code:
                    type: string
                    description: the code of the problem that occurred
                    example: TIMEOUT504
                  name:
                    type: string
                    description: the name of the underlying component
                    example: eventhandler
                  details:
                    type: string
                    description: more information about the problem at hand
                    example: >-
                      Messages are not received due to the eventhandler who
                      seems to be too busy.
                  type:
                    type: string
                    description: the type of problem that occurred
                    example: event
          description: >-
            A health status result including the details of underlying
            components
    Links:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/schemas/Links'
    Pages:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/schemas/Pages'
    Problem:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/schemas/Problem'
tags:
{{#each tags}}
  - name: {{capitalize name}}
    description: Operations related to {{#each collection}} {{.}}, {{/each}} ...
{{/each}}