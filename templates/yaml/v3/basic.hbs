openapi: 3.0.3
info:
  version: {{version}}
  title: {{capitalize name}} API
  description: > 
    This {{name}} API is generated based on the specifications of the [Digipolis API System 7.0](https://antwerp-api.digipolis.be/).
    

    Here are some tips **you can do next:** 

      - Check if all resources (like {{capitalize resources.0.name}}) require all operations that were generated, some parts of the API may be readOnly so remove the operations not needed
      - The schema (or models) of all resources are examples here, be sure to adjust them to your case at hand
      - Have a look [here](https://antwerp-api.digipolis.be/#/content/common/swagger-docs) for tips on writing good documentation.
        
servers:
  - url: 'https://{environment}.antwerpen.be/{catalog}/{provider}/{service}/{version}'
    description: OTAP servers
    variables:
      environment:
        default: api-gw-p   #production
        description: choice between production, acceptance or the development environment
        enum:
        - 'api-gw-p'        #production
        - 'api-gw-a'        #acceptance
        - 'api-gw-o'        #development
      catalog:
        default: antwerpen
        description: the catalog in which this API will be published  
      provider:
        default: digipolis
        description: the name of the organisation that provides your {{name}} API
      service:
        default: {{name}}
        description: the name of this Service 
      version:
        default: {{version}}
        description: specify the major version of this api
{{#if resources.length}}
paths:
{{else}}
paths: {}    
{{/if}}
{{#each resources}}
  {{#if collectionPath~}}'{{~collectionPath~}}':{{~/if}}
    {{#if ops.list}}
    get:
      summary: Retrieve a list of {{#if parent }}{{collection}} for a certain {{parent.name}}{{else}}{{collection}}{{/if}}
      description: 'Retrieve a paged result list of {{#if parent }}`{{collection}}` for a certain `{{parent.name}}`{{else}}`{{collection}}`{{/if}}.'
      parameters:
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
        - in: query
          name: refnumber
          description: Filter {{collection}} using a given refnumber
          schema:
            type: integer
            example: {{random 1 500}}
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/pagingStrategy'
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/{{collection}}'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.post}}
    post:
      summary: Add a new {{name}} to the {{collection}} collection.
      description: 'Add a new `{{name}}` resource to the `{{collection}}` collection{{#if parent }} of the given `{{parent.name}}`{{/if}}.'
      {{#if parent }}
      parameters:
        - $ref: '#/components/parameters/{{parent.idParameter}}'
      {{/if}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{name}}'
      responses:
        '201':
          description: '`{{name}}` created'
          content:
            application/json:
              schema:
                type: object
                description: 'The `id` of the newly created `{{capitalize name}}`'
                properties:
                  id:
                    type: number
                    description: 'A unique number for `{{capitalize name}}`'
                    readOnly: true
                    example: {{random 1000 10000}}
          headers:
            Location:
              description: The location of the newly created {{name}}
              schema: 
                type: string
                format: uri
                example: '/{{#if parent }}{{parent.collection}}/{{random 1000 10000}}/{{/if}}{{collection}}/{{random 1000 10000}}'
        '400':
          $ref: '#/components/responses/badrequest'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
  {{#if resourcePath ~}}'{{~resourcePath~}}':{{~/if}}
    {{#if ops.get}}
    get:
      summary: Retrieve one {{name}}
      description: 'Retrieve exactly one `{{name}}` for the given id in the path.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{name}}'
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'https://api-gw-a.antwerpen.be/antwerpen/digipolis/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 404
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.head}}
    head:
      summary: Check if the {{name}} exist
      description: 'Check if the `{{name}}` with the given id exists.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      responses:
        '200':
          description: '`{{name}}` exist.'
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'https://api-gw-a.antwerpen.be/antwerpen/digipolis/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 400
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.put}}
    put:
      summary: Replace the {{name}} with the one given here
      description: 'Replace the complete `{{name}}` resource with the one provided in the payload. If {{name}} does not exist a 404 will be returned.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{name}}'
      responses:
        '200':
          description: '`{{name}}` replaced'
          content:
            application/json:
              schema:
                type: object
                description: 'The `id` of the newly created `{{name}}`'
                properties:
                  id:
                    type: number
                    description: 'A unique number for `{{name}}`'
                    readOnly: true
                    example: {{random 1000 10000}}
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'https://api-gw-a.antwerpen.be/antwerpen/digipolis/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 400
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}} 
    {{/if}}
    {{#if ops.patch}}
    patch:
      summary: Update a {{name}}
      description: 'With this operation you can update parts of the `{{name}}` for the given id.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                    description: 'The date when this `{{name}}` was issued.'
                    example: '2020-04-16'
      responses:
        '204':
          description: '`{{name}}` partially updated'
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'https://api-gw-a.antwerpen.be/antwerpen/digipolis/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 400
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}
    {{/if}}
    {{#if ops.delete}}
    delete:
      summary: Delete a {{name}}
      description: 'Remove the `{{capitalize name}}` with the given id.'
      parameters:
        - $ref: '#/components/parameters/{{idParameter}}'
        {{#if parent }}
        - $ref: '#/components/parameters/{{parent.idParameter}}'
        {{/if}}
      responses:
        '204':
          description: '`{{name}}` removed'
        '400':
          $ref: '#/components/responses/badrequest'
        '404':
          description: '`{{name}}`{{#if parent }} or `{{parent.name}}`{{/if}} Not Found'
          content:
            application/problem+json:
                schema:
                  $ref: '#/components/schemas/problem'
                example:
                  type: 'https://api-gw-a.antwerpen.be/antwerpen/digipolis/{{name}}/{{version}}/errors/SVC0011'
                  title: '{{name}}{{#if parent }} or {{parent.name}}{{/if}} Not Found'
                  status: 400
                  identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                  code: 'SVC0011'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - {{capitalize tag}}  
    {{/if}}
{{/each}}
{{#if resources.length}}
  '/status/health':
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns high level information about the service according to the status
        &amp; [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - System
  '/status/health/components':
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns information about the service and its underlying components
        according to the status &amp; [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatusComponents'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - System
{{/if}}
components:
  parameters:
    tenantParam:
      name: dgp-tenant-id
      description: the identification of the tenant you want to use
      in: header
      required: true
      schema:
        type: string
{{#each resources}}
    {{idParameter}}:
      name: {{idParameter}}
      in: path
      description: >-
        The unique `id` of this `{{name}}` in our system.
      required: true
      schema:
        minimum: 1
        type: string
        description: >-
         'The `{{name}}` id. This is a unique number issued by this API.'
        example: {{random 2000 10000}}    
        
{{/each}}
    page:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/parameters/Page'
    pagesize:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/parameters/Pagesize'
    pagingStrategy:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/parameters/PagingStrategy'
  responses:
    badrequest:
      description: Bad Request
      content:
          application/problem+json:
              schema:
                  $ref: '#/components/schemas/problem'
              example:
                type: 'https://api-gw-a.antwerpen.be/antwerpen/digipolis/{{name}}/{{version}}/errors/SVC0034'
                title: 'The request is malformed, please check the URL in the queryparameters and header values.'
                status: 400
                identifier: 'DDD68BE6-B522-3E35-08BF-9563D1D11991'
                code: 'SVC0034'
    internalserver:
      description: Internal Server Error
      content:
          application/problem+json:
              schema:
                  $ref: '#/components/schemas/problem'
              example:
                type: 'https://api-gw-a.antwerpen.be/antwerpen/digipolis/{{name}}/{{version}}/errors/SVC0032'
                title: 'There seems to be an issue with the server at the moment. Please try again later.'
                status: 500
                identifier: 'C5C68BE6-B5FF-11E5-B08F-D1D119563991'
                code: 'SVC0032'
    NotFound:
      description: Not found
      content:
          application/problem+json:
              schema:
                  $ref: '#/components/schemas/problem'
              example:
                type: 'https://api-gw-a.antwerpen.be/antwerpen/digipolis/{{name}}/{{version}}/errors/SVC0011'
                title: 'Requested resource not found.'
                status: 404
                identifier: 'B5FF68BBB-DE23-89AB-CCC2-7891D1D11956'
                code: 'SVC0011'
  schemas:
{{#each resources}}
  {{#if ops.hasCollectionOps}}
    {{collection}}:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/links'
        _embedded:
          type: object
          description: Returns a list of {{collection}}
          properties:
            {{collection}}:
              type: array
              items:
                $ref: '#/components/schemas/{{name}}'
        _page:
          $ref: '#/components/schemas/pages'
      example:
        _links:
          self:
            href: /{{collection}}?pagesize=10&page=1
          first:
            href: /{{collection}}?pagesize=10&page=1
          last:
            href: /{{collection}}?pagesize=10&page=3
          prev:
            href: /{{collection}}?pagesize=10&page=1
          next:
            href: /{{collection}}?pagesize=10&page=2
        _embedded:
          {{collection}}:
            - id: {{random 1000 10000}}
              date: '2020-04-28'
              logo: 'https://s3.amazon.com/klj{{random 1000 10000}}/logo.xyz.png'
            - id: {{random 1000 10000}}
              date: '2020-07-12'
              logo: 'https://s3.amazon.com/pfh{{random 1000 10000}}/logo.xyz.png'
            - ...
        _page:
          size: 10
          totalElements: 24
          totalPages: 1
          number: 0
  {{/if}}
    {{name}}:
      type: object
      properties:
        id:
          type: number
          description: 'A unique number for `{{capitalize name}}`'
          readOnly: true
          example: {{random 1000 10000}}
        date:
          type: string
          format: date
          description: 'The date when this `{{capitalize name}}` was issued.'
          example: '2020-04-16'
        logo:
          type: string
          format: uri
          description: 'The logo for this `{{capitalize name}}`'
          example: 'https://s3.amazon.com/klj{{random 1000 10000}}/logo.xyz.png'
{{/each}}
    healthStatus:
      type: object
      properties:
        status:
          type: string
          description: Contains a high level status of the health for this service
          example: outage
          enum:
            - ok
            - degraded
            - outage
      description: A high level health status result
    healthStatusComponents:
      allOf:
        - $ref: '#/components/schemas/healthStatus'
        - type: object
          properties:
            components:
              type: array
              items:
                type: object
                properties:
                  errormessage:
                    type: string
                    description: Contains the actual message in case of a problem
                    example: timeout
                  code:
                    type: string
                    description: the code of the problem that occurred
                    example: TIMEOUT504
                  name:
                    type: string
                    description: the name of the underlying component
                    example: eventhandler
                  details:
                    type: string
                    description: more information about the problem at hand
                    example: >-
                      Messages are not received due to the eventhandler who
                      seems to be too busy.
                  type:
                    type: string
                    description: the type of problem that occurred
                    example: event
          description: >-
            A health status result including the details of underlying
            components
    links:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/schemas/Links'
    pages:
      $ref: 'https://raw.githubusercontent.com/digipolisantwerpdocumentation/api-system/master/components/paging.yaml#/components/schemas/Pages'
    problem:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/schemas/Problem'
  securitySchemes:
    ApiKeyAuth:        
      type: apiKey
      in: header       
      name: apikey    
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT    
security:
  - ApiKeyAuth: []
tags:
{{#each tags}}
  - name: {{capitalize name}}
    {{#ifGT collection.length 1}} 
    description: Operations related to {{#each collection}}{{capitalize .}}, {{/each}}... 
    {{else}} 
    description: Operations related to {{#each collection}}{{capitalize .}} {{/each}}
    {{/ifGT}}
{{/each}}