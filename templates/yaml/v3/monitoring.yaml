openapi: 3.0.1
info:
  title: Monitoring
  description: In this OAS document we describe the commonly used monitoring parts of an OAS v3 document.
  version: 1.0.0
servers:
- url: /
paths: 
  /status-health:
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns high level information about the service according to the status
        &amp; [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - System
  /status/health/components:
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns information about the service and its underlying components
        according to the status &amp; [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatusComponents'
        '500':
          $ref: '#/components/responses/internalserver'
      tags:
        - System

  "/status/health/metrics":
    get:
      tags:
        - System
      summary: Returns metric information about this service
      description: >-
        Returns information about the service in a [Prometheus
        format](https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md)
      responses:
        '200':
          description: Prometheus Metrics
          content:
            text/plain; version=0.0.4:
              schema:
                type: string
                example: >
                  process_virtual_memory_bytes 897339392.0

                  process_resident_memory_bytes 123064320.0

                  process_start_time_seconds 1530601590.11

                  process_cpu_seconds_total 2.8

                  process_open_fds 46.0

                  process_max_fds 1024.0

                  python_info{implementation="CPython",major="3",minor="6",patchlevel="5",version="3.6.5"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="0.005",method="GET",path="/favicon.ico",status="404"}
                  0.0

                  flask_http_request_duration_seconds_bucket{le="0.01",method="GET",path="/favicon.ico",status="404"}
                  0.0

                  flask_http_request_duration_seconds_bucket{le="0.025",method="GET",path="/favicon.ico",status="404"}
                  0.0

                  flask_http_request_duration_seconds_bucket{le="0.05",method="GET",path="/favicon.ico",status="404"}
                  0.0

                  flask_http_request_duration_seconds_bucket{le="0.075",method="GET",path="/favicon.ico",status="404"}
                  0.0

                  flask_http_request_duration_seconds_bucket{le="0.1",method="GET",path="/favicon.ico",status="404"}
                  0.0

                  flask_http_request_duration_seconds_bucket{le="0.25",method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="0.5",method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="0.75",method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="1.0",method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="2.5",method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="5.0",method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="7.5",method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="10.0",method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="+Inf",method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_count{method="GET",path="/favicon.ico",status="404"}
                  1.0

                  flask_http_request_duration_seconds_sum{method="GET",path="/favicon.ico",status="404"}
                  0.11943134200009808

                  flask_http_request_duration_seconds_bucket{le="0.005",method="POST",path="/uploads",status="202"}
                  0.0

                  flask_http_request_duration_seconds_bucket{le="0.01",method="POST",path="/uploads",status="202"}
                  0.0

                  flask_http_request_duration_seconds_bucket{le="0.025",method="POST",path="/uploads",status="202"}
                  0.0

                  flask_http_request_duration_seconds_bucket{le="0.05",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="0.075",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="0.1",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="0.25",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="0.5",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="0.75",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="1.0",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="2.5",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="5.0",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="7.5",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="10.0",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_bucket{le="+Inf",method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_count{method="POST",path="/uploads",status="202"}
                  1.0

                  flask_http_request_duration_seconds_sum{method="POST",path="/uploads",status="202"}
                  0.03629215999990265     
        '500':
          $ref: '#/components/responses/internalserver'
components:
  responses:
    internalserver:
      description: Internal Server Error
      content:
          application/problem+json:
              schema:
                  $ref: '#/components/schemas/problem'
              example:
                type: 'https://api-gw-a.antwerpen.be/antwerpen/digipolis/{{name}}/{{version}}/errors/SVC0032'
                title: 'There seems to be an issue with the server at the moment. Please try again later.'
                status: 500
                identifier: 'C5C68BE6-B5FF-11E5-B08F-D1D119563991'
                code: 'SVC0032'
  
  schemas:
    healthStatus:
      type: object
      properties:
        status:
          type: string
          description: Contains a high level status of the health for this service
          example: outage
          enum:
            - ok
            - degraded
            - outage
      description: A high level health status result
    healthStatusComponents:
      allOf:
        - $ref: '#/components/schemas/healthStatus'
        - type: object
          properties:
            components:
              type: array
              items:
                type: object
                properties:
                  errormessage:
                    type: string
                    description: Contains the actual message in case of a problem
                    example: timeout
                  code:
                    type: string
                    description: the code of the problem that occurred
                    example: TIMEOUT504
                  name:
                    type: string
                    description: the name of the underlying component
                    example: eventhandler
                  details:
                    type: string
                    description: more information about the problem at hand
                    example: >-
                      Messages are not received due to the eventhandler who
                      seems to be too busy.
                  type:
                    type: string
                    description: the type of problem that occurred
                    example: event
          description: >-
            A health status result including the details of underlying
            components
    problem:
      $ref: 'https://raw.githubusercontent.com/eriklenaerts/api-requirements/generic-defs/components/problem.yaml#/components/schemas/Problem'
      
  parameters:
    Pagesize:
      name: pagesize
      in: query
      description: Max number of items for each page
      required: true
      schema:
        type: integer
    PagingStrategy:
      name: paging-strategy
      in: query
      description: Specify the paging strategy, i.e. if totalPages and totalElements
        should be included in the response output
      schema:
        type: string
        default: noCount
        enum:
        - noCount
        - withCount
    Page:
      name: page
      in: query
      description: Starting offset for the list, this can be either a number or the
        literal "last"
      required: true
      schema:
        type: string
